// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vip.proto

package vip

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetIsVIPByIDRequest struct {
	VipID                string   `protobuf:"bytes,1,opt,name=vipID,proto3" json:"vipID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIsVIPByIDRequest) Reset()         { *m = GetIsVIPByIDRequest{} }
func (m *GetIsVIPByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetIsVIPByIDRequest) ProtoMessage()    {}
func (*GetIsVIPByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2670e1a48005ac67, []int{0}
}

func (m *GetIsVIPByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIsVIPByIDRequest.Unmarshal(m, b)
}
func (m *GetIsVIPByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIsVIPByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetIsVIPByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIsVIPByIDRequest.Merge(m, src)
}
func (m *GetIsVIPByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetIsVIPByIDRequest.Size(m)
}
func (m *GetIsVIPByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIsVIPByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIsVIPByIDRequest proto.InternalMessageInfo

func (m *GetIsVIPByIDRequest) GetVipID() string {
	if m != nil {
		return m.VipID
	}
	return ""
}

type GetIsVIPByIDResponse struct {
	VipID                string   `protobuf:"bytes,1,opt,name=vipID,proto3" json:"vipID,omitempty"`
	IsVIP                bool     `protobuf:"varint,2,opt,name=isVIP,proto3" json:"isVIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIsVIPByIDResponse) Reset()         { *m = GetIsVIPByIDResponse{} }
func (m *GetIsVIPByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetIsVIPByIDResponse) ProtoMessage()    {}
func (*GetIsVIPByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2670e1a48005ac67, []int{1}
}

func (m *GetIsVIPByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIsVIPByIDResponse.Unmarshal(m, b)
}
func (m *GetIsVIPByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIsVIPByIDResponse.Marshal(b, m, deterministic)
}
func (m *GetIsVIPByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIsVIPByIDResponse.Merge(m, src)
}
func (m *GetIsVIPByIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetIsVIPByIDResponse.Size(m)
}
func (m *GetIsVIPByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIsVIPByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetIsVIPByIDResponse proto.InternalMessageInfo

func (m *GetIsVIPByIDResponse) GetVipID() string {
	if m != nil {
		return m.VipID
	}
	return ""
}

func (m *GetIsVIPByIDResponse) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

type VIPObject struct {
	VipID                string   `protobuf:"bytes,1,opt,name=vipID,proto3" json:"vipID,omitempty"`
	IsVIP                bool     `protobuf:"varint,2,opt,name=isVIP,proto3" json:"isVIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VIPObject) Reset()         { *m = VIPObject{} }
func (m *VIPObject) String() string { return proto.CompactTextString(m) }
func (*VIPObject) ProtoMessage()    {}
func (*VIPObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_2670e1a48005ac67, []int{2}
}

func (m *VIPObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VIPObject.Unmarshal(m, b)
}
func (m *VIPObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VIPObject.Marshal(b, m, deterministic)
}
func (m *VIPObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VIPObject.Merge(m, src)
}
func (m *VIPObject) XXX_Size() int {
	return xxx_messageInfo_VIPObject.Size(m)
}
func (m *VIPObject) XXX_DiscardUnknown() {
	xxx_messageInfo_VIPObject.DiscardUnknown(m)
}

var xxx_messageInfo_VIPObject proto.InternalMessageInfo

func (m *VIPObject) GetVipID() string {
	if m != nil {
		return m.VipID
	}
	return ""
}

func (m *VIPObject) GetIsVIP() bool {
	if m != nil {
		return m.IsVIP
	}
	return false
}

func init() {
	proto.RegisterType((*GetIsVIPByIDRequest)(nil), "vip.GetIsVIPByIDRequest")
	proto.RegisterType((*GetIsVIPByIDResponse)(nil), "vip.GetIsVIPByIDResponse")
	proto.RegisterType((*VIPObject)(nil), "vip.VIPObject")
}

func init() { proto.RegisterFile("vip.proto", fileDescriptor_2670e1a48005ac67) }

var fileDescriptor_2670e1a48005ac67 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xcb, 0x2c, 0xd0,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0xcb, 0x2c, 0x50, 0xd2, 0xe6, 0x12, 0x76, 0x4f,
	0x2d, 0xf1, 0x2c, 0x0e, 0xf3, 0x0c, 0x70, 0xaa, 0xf4, 0x74, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0xcb, 0x2c, 0xf0, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x70, 0x94, 0x9c, 0xb8, 0x44, 0x50, 0x15, 0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x62,
	0x57, 0x0d, 0x12, 0xcd, 0x04, 0x29, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x08, 0x82, 0x70, 0x94,
	0xcc, 0xb9, 0x38, 0xc3, 0x3c, 0x03, 0xfc, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0x48, 0xd1, 0x68, 0xe4,
	0xc3, 0xc5, 0x1c, 0xe6, 0x19, 0x20, 0xe4, 0xca, 0xc5, 0x83, 0xec, 0x06, 0x21, 0x09, 0x3d, 0x90,
	0x8f, 0xb0, 0xf8, 0x41, 0x4a, 0x12, 0x8b, 0x0c, 0xc4, 0xc1, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0x30,
	0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x81, 0x1a, 0x67, 0x1c, 0x10, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VIPClient is the client API for VIP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VIPClient interface {
	GetIsVIPByID(ctx context.Context, in *GetIsVIPByIDRequest, opts ...grpc.CallOption) (*GetIsVIPByIDResponse, error)
}

type vIPClient struct {
	cc grpc.ClientConnInterface
}

func NewVIPClient(cc grpc.ClientConnInterface) VIPClient {
	return &vIPClient{cc}
}

func (c *vIPClient) GetIsVIPByID(ctx context.Context, in *GetIsVIPByIDRequest, opts ...grpc.CallOption) (*GetIsVIPByIDResponse, error) {
	out := new(GetIsVIPByIDResponse)
	err := c.cc.Invoke(ctx, "/vip.VIP/GetIsVIPByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VIPServer is the server API for VIP service.
type VIPServer interface {
	GetIsVIPByID(context.Context, *GetIsVIPByIDRequest) (*GetIsVIPByIDResponse, error)
}

// UnimplementedVIPServer can be embedded to have forward compatible implementations.
type UnimplementedVIPServer struct {
}

func (*UnimplementedVIPServer) GetIsVIPByID(ctx context.Context, req *GetIsVIPByIDRequest) (*GetIsVIPByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsVIPByID not implemented")
}

func RegisterVIPServer(s *grpc.Server, srv VIPServer) {
	s.RegisterService(&_VIP_serviceDesc, srv)
}

func _VIP_GetIsVIPByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsVIPByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).GetIsVIPByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vip.VIP/GetIsVIPByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).GetIsVIPByID(ctx, req.(*GetIsVIPByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VIP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vip.VIP",
	HandlerType: (*VIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIsVIPByID",
			Handler:    _VIP_GetIsVIPByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vip.proto",
}
